/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
__export(exports, {
  default: () => AliasFromHeadingPlugin
});
var import_obsidian = __toModule(require("obsidian"));
var AliasFromHeadingPlugin = class extends import_obsidian.Plugin {
  onload() {
    const { metadataCache, vault, workspace } = this.app;
    const headingByPath = new Map();
    function getHeading(file) {
      const { headings } = metadataCache.getFileCache(file);
      if (!Array.isArray(headings) || !headings.length) {
        return;
      }
      const { heading } = headings[0];
      return heading;
    }
    const clearHeadings = (0, import_obsidian.debounce)((path) => {
      if (!headingByPath.has(path)) {
        return;
      }
      const heading = headingByPath.get(path);
      headingByPath.clear();
      headingByPath.set(path, heading);
    }, 1e4, true);
    function loadFile(file) {
      if (!file) {
        return;
      }
      const { path } = file;
      const heading = getHeading(file);
      headingByPath.set(path, heading);
      clearHeadings(path);
    }
    workspace.onLayoutReady(() => {
      const activeFile = workspace.getActiveFile();
      loadFile(activeFile);
    });
    this.registerEvent(workspace.on("file-open", loadFile));
    this.registerEvent(vault.on("rename", (file, oldPath) => {
      if (!(file instanceof import_obsidian.TFile)) {
        return;
      }
      const { path } = file;
      const heading = headingByPath.get(oldPath);
      headingByPath.set(path, heading);
    }));
    this.registerEvent(metadataCache.on("changed", (file) => __async(this, null, function* () {
      const { path } = file;
      if (!headingByPath.has(path)) {
        return;
      }
      const prevHeading = headingByPath.get(path);
      const heading = getHeading(file);
      headingByPath.set(path, heading);
      if (prevHeading === heading) {
        return;
      }
      const modifiedFiles = Object.entries(metadataCache.resolvedLinks).reduce((paths, [toPath, links]) => {
        const hasRef = Object.keys(links).includes(path);
        return hasRef ? [...paths, toPath] : paths;
      }, []).map((p) => {
        const { links = [] } = metadataCache.getCache(p);
        const linksToReplace = links.map((rc) => rc.link).filter((link) => link.split("#")[0] === metadataCache.fileToLinktext(file, "")).map((link) => [prevHeading, heading].map((h) => `[[${link}|${h === void 0 ? link : h}]]`));
        return [p, linksToReplace];
      }).filter(([, linksToReplace]) => linksToReplace.length).map((_0) => __async(this, [_0], function* ([p, linksToReplace]) {
        const f = vault.getAbstractFileByPath(p);
        const prevContents = yield vault.read(f);
        const [contents, matches] = linksToReplace.reduce(([source, total], [find, replace]) => {
          let count = 0;
          const re = new RegExp(escapeRegExp(find), "g");
          const s = source.replace(re, () => {
            count++;
            return replace;
          });
          return [s, count + total];
        }, [prevContents, 0]);
        yield vault.modify(f, contents);
        return matches;
      }));
      const linkMatches = (yield Promise.all(modifiedFiles)).filter((m) => m);
      const fileCount = linkMatches.length;
      const linkCount = linkMatches.reduce((sum, value) => sum + value, 0);
      if (!fileCount || !linkCount) {
        return;
      }
      new import_obsidian.Notice(`Updated ${linkCount} ${pluralize(linkCount, "link")} in ${fileCount} ${pluralize(fileCount, "file")}.`);
    })));
    this.removeMetadataCachePatch = patch(metadataCache, {
      getLinkSuggestions(originalMethod) {
        return function() {
          const delimiter = "|";
          const suggestions = originalMethod();
          const frontmatterAliases = suggestions.filter((suggestion) => suggestion.hasOwnProperty("path") && suggestion.hasOwnProperty("alias")).map(({ path, alias }) => [path, alias].join(delimiter));
          const suggestionsFromHeading = vault.getMarkdownFiles().map((file) => {
            const alias = getHeading(file);
            const path = omitExtension(file.path);
            if (!alias || frontmatterAliases.includes([path, alias].join(delimiter))) {
              return;
            }
            return { file, path, alias };
          }).filter((v) => v);
          return [...suggestions, ...suggestionsFromHeading];
        };
      }
    });
  }
  onunload() {
    this.removeMetadataCachePatch();
  }
};
function escapeRegExp(source) {
  return source.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
}
function omitExtension(path) {
  const i = path.lastIndexOf(".");
  return i === -1 || i === path.length - 1 || i === 0 ? path : path.slice(0, i);
}
function patch(source, methods) {
  const removals = Object.entries(methods).map(([key, createMethod]) => {
    const hadOwn = source.hasOwnProperty(key);
    const method = source[key];
    source[key] = createMethod(method.bind(source));
    return function remove() {
      if (hadOwn) {
        source[key] = method;
      } else {
        delete source[key];
      }
    };
  });
  return () => removals.forEach((r) => r());
}
function pluralize(count, singular, plural = `${singular}s`) {
  return count === 1 ? singular : plural;
}
//# sourceMappingURL=data:application/json;base64,
